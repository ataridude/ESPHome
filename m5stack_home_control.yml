globals:
  - id: screen_num
    type: int
    restore_value: no
    initial_value: '0'
  - id: screen_show_all
    type: int
    restore_value: no
    initial_value: '1'
  - id: screen_type
    type: int
    restore_value: no
    initial_value: '1'
    # 1 = weather
    # 2 = temp/humi sensor
    # 3 = lights

esphome:
  name: esphome-web-6a0ed4
  friendly_name: m5stack

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  logs:
    component: ERROR

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key
  id: api_id
  
ota:


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-6A0Ed4"
    password: "XXXXXX"

captive_portal:
    
spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 19

color:
  - id: my_red
    red: 100%
    green: 3%
    blue: 5%

font:
  - file: "Roboto-Medium.ttf"
    id: font_roboto_medium22
    size: 22
    glyphs: '!"%()+,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/³µ'
  - file: "Roboto-Medium.ttf"
    id: font_roboto_medium44
    size: 44
    glyphs: '!"%()+,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/³µ'

text_sensor:
  - platform: homeassistant
    id: w_forecast
    entity_id: sensor.wx_forecast

sensor:
  - platform: homeassistant
    id: office_temp
    entity_id: sensor.esphome_web_7f8bdc_temperature
    internal: true
  - platform: homeassistant
    id: office_humi
    entity_id: sensor.esphome_web_7f8bdc_humidity
    internal: true
  - platform: homeassistant
    id: garage_temp
    entity_id: sensor.esphome_web_0e0394_garage_temp
    internal: true
  - platform: homeassistant
    id: garage_humi
    entity_id: sensor.esphome_web_0e0394_garage_humidity
    internal: true

display:
  - platform: ili9xxx
    model: M5STACK
    cs_pin: 14
    dc_pin: 27
    reset_pin: 33
    rotation: 0
    update_interval: 1s
    lambda: |-
      if(id(screen_type)==1) {
        // Weather forecast
        std::string fivedays = id(w_forecast).state;
        std::vector<std::string> five;
        std::vector<std::string> v;

        //ESP_LOGD("fivedays [%s]", fivedays.c_str());
        five.clear();

        int count = 0;
        int wx = 0; // start positio x
        int wy = 0; // start position y
        char *token = strtok(const_cast<char*>(fivedays.c_str()), "#");
        // this while splits the string (I believe, I "found" the code)
        while (token != NULL)
          {
            five.push_back(token);
            token = strtok (NULL, "#");
          }
        // here we loop the days
        int loop=0;
        for ( std::string fiv : five ) {
          if ( (loop == id(screen_num)) || (id(screen_show_all) == 1)) {
            //it.rectangle(0, wy, 128, 59);  // adds a border around the "day"
            //it.rectangle(1, wy+1, 126, 57);

            std::string str = "";
            str = fiv;
            //ESP_LOGD("test: ", "String to Vector: %s", str.c_str());
            v.clear();
            token = strtok (&str[0],";");
            while (token != NULL)
            {
              v.push_back(token);
              token = strtok (NULL, ";");
            }
            // this is the loop for each value in the "day"
            for ( std::string s : v ) {
              if(count == 0){
                // Day (Mon/Tue...)
                it.printf(wx, wy, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "%s", s.c_str());
              }else if(count == 1){
                // Temperature
                it.printf(wx +60, wy, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "%s", s.c_str());
              }else if(count == 2){
                // Precipitation
                it.printf(wx +100, wy, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "%s", s.c_str());
              }else if(count == 3){
                // weather icon
                it.printf(wx + 135, wy, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "%s", s.c_str());
              }else if(count == 4){
                // weather icon
                it.printf(wx + 210, wy, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "%s", s.c_str());
              }

              //ESP_LOGD("test: ", "String to Vector: %s", s.c_str());
              count += 1;
            }
            count = 0;
            wy += 25; // move down 25 pixels and output next day
          }
          loop++;
        }
      } else if(id(screen_type)==2) {
        // Temp/humi sensor
        if(id(screen_show_all)==1) {
          it.print(0, 22, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "Office");
          it.printf(0, 44, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "Temp: %.1f, %.1f%", id(office_temp).state, id(office_humi).state);
          it.print(0, 88, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "Garage");
          it.printf(0, 110, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "Temp: %.1f, %.1f%", id(garage_temp).state, id(garage_humi).state);
        } else if(id(screen_num)==0) {
          it.print(0, 22, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "Office");
          it.printf(0, 44, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "Temp: %.1f, %.1f%", id(office_temp).state, id(office_humi).state);
        } else if(id(screen_num)==1) {
          it.print(0, 22, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "Garage");
          it.printf(0, 44, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "Temp: %.1f, %.1f%", id(garage_temp).state, id(garage_humi).state);
        }
      } else if(id(screen_type)==3) {
        // Lights
        if(id(screen_show_all)==1) {
          if(id(lr_lamp).state) {
            it.print(0, 25, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "LR lamp: ON");
          } else {
            it.print(0, 25, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "LR lamp: OFF");
          }
          if(id(mbr_bedside_lamp).state) {
            it.print(0, 50, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "MBR lamp: ON");
          } else {
            it.print(0, 50, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "MBR lamp: OFF");
          }
          if(id(play_desk_lamp).state) {
            it.print(0, 75, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "Play desk lamp: ON");
          } else {
            it.print(0, 75, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "Play desk lamp: OFF");
          }
          if(id(garage_light).state) {
            it.print(0, 100, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "Garage light: ON");
          } else {
            it.print(0, 100, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "Garage light: OFF");
          }
        } else if(id(screen_num)==0) {
          if(id(lr_lamp).state) {
            it.print(0, 25, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "LR lamp: ON");
          } else {
            it.print(0, 25, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "LR lamp: OFF");
          }
        } else if(id(screen_num)==1) {
          if(id(mbr_bedside_lamp).state) {
            it.print(0, 25, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "MBR lamp: ON");
          } else {
            it.print(0, 25, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "MBR lamp: OFF");
          }
        } else if(id(screen_num)==2) {
          if(id(play_desk_lamp).state) {
            it.print(0, 25, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "Play desk lamp: ON");
          } else {
            it.print(0, 25, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "Play desk lamp: OFF");
          }
        }
      } else {
        it.print(0, 25, id(font_roboto_medium22), id(my_red), TextAlign::TOP_LEFT, "UNKNOWN");
      }

binary_sensor:
  - platform: gpio
    name: "M5_BtnA"
    pin:
      number: 39
      inverted: true
    on_click:
      then:
        lambda: |-
          if(id(screen_show_all)==1) {
            id(screen_show_all) = 0;
          } else {
            id(screen_num) += 1;
            if(id(screen_type)==1 && id(screen_num)>5){
              id(screen_num) = 0;
            } else if(id(screen_type)==2 && id(screen_num)>1) {
              id(screen_num) = 0;
            } else if(id(screen_type)==3 && id(screen_num)>2) {
              id(screen_show_all) = 1;
              id(screen_num) = 0;
            }
          }
  - platform: gpio
    id: M5_BtnB
    pin:
      number: 38
      inverted: true
    on_click:
      then:
        lambda: |-
          if(id(screen_type) == 1 or id(screen_type) == 2) {
            if(id(screen_show_all) == 1) {
              id(screen_show_all) = 0;
            } else {
              id(screen_show_all) = 1;
            }
          } else if(id(screen_type) == 3) {
            HomeassistantServiceResponse resp;
            resp.service = "switch.toggle";
            HomeassistantServiceMap entity_id_kv;
            entity_id_kv.key = "entity_id";
            if(id(screen_num)==0) {
              entity_id_kv.value = "switch.living_room_lamp";
            } else if(id(screen_num)==1) {
              entity_id_kv.value = "switch.mbr_bedside_lamp";
            } else if(id(screen_num)==2) {
              entity_id_kv.value = "switch.play_desk_lamp";
            }
            resp.data.push_back(entity_id_kv);
            id(api_id).send_homeassistant_service_call(resp);
          }
  - platform: gpio
    name: M5_BtnC
    pin:
      number: 37
      inverted: true
    on_click:
      then:
        lambda: |-
          // default to showing all data when we change screen types
          id(screen_show_all) = 1;
          id(screen_num) = 0;
          id(screen_type) += 1;
          if(id(screen_type)>3) {
            id(screen_type) = 1;
          }
  - platform: homeassistant
    id: lr_lamp
    entity_id: switch.living_room_lamp
  - platform: homeassistant
    id: mbr_bedside_lamp
    entity_id: switch.mbr_bedside_lamp
  - platform: homeassistant
    id: play_desk_lamp
    entity_id: switch.play_desk_lamp
  - platform: homeassistant
    id: garage_light
    entity_id: switch.garage_light_bar

# GPIO pin of the display backlight
switch:
  - platform: gpio
    pin: 32
    name: "Backlight"
    id: backlight
    restore_mode: ALWAYS_ON
